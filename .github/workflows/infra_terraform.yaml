name: Run Terraform
on:
  workflow_dispatch:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
        default: "infra/change-me"
      force-apply:
        type: boolean
        description: "Force apply"
        required: true
      force-plan:
        type: boolean
        description: "Force plan"
        required: true

  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
      force-apply:
        type: boolean
        description: "Force apply"
        required: true
      force-plan:
        type: boolean
        description: "Force plan"
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_CLOUD_ORGANIZATION: ${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}
  AWS_ROLE: ${{ vars.AWS_ROLE }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  should-plan: ${{ inputs.force-plan || github.event_name == 'pull_request' }}
  should-apply: ${{ inputs.force-apply && github.event_name != 'pull_request' }}

jobs:
  terraform:
    name: Execute Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Run
        if: (env.should-plan != 'true' && env.should-apply != 'true')
        uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          filters: |
            changed:
              - '${{ inputs.working-directory }}/**'

      - name: Set Plan & Apply flags
        if: (steps.filter-paths.outcome == 'success')
        run: |
          echo "should-plan=${{ contains(steps.filter-paths.outputs.changes, 'changed') == 'true' }}" >> $GITHUB_ENV
          echo "should-apply=${{ contains(steps.filter-paths.outputs.changes, 'changed') == 'true' }}" >> $GITHUB_ENV

      - name: Setup AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform fmt
        id: fmt
        working-directory: ${{ inputs.working-directory }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.working-directory }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: (env.should-plan == 'true' && env.should-apply != 'true')
        working-directory: ${{ inputs.working-directory }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: (github.event_name == 'pull_request' && always())
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Path: \`${{ inputs.working-directory }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        id: apply
        if: (env.should-apply == 'true' && github.event_name != 'pull_request')
        working-directory: ${{ inputs.working-directory }}
        run: terraform apply -auto-approve -no-color

      - name: Summary
        if: always()
        run: |
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "#### Terraform Run ####" >> $GITHUB_STEP_SUMMARY
          echo "**Working Path** üìÅ \`${{ inputs.working-directory }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Format and Style** üñå \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Initialization** ‚öôÔ∏è \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plan** üìñ \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Validation** ü§ñ \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Apply** üöÄ \`${{ steps.apply.outcome }}\`" >> $GITHUB_STEP_SUMMARY
