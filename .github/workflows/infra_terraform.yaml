name: Run Terraform
on:
  workflow_dispatch:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
        default: "infra/change-me"
      force-apply:
        type: boolean
        description: "Force apply"
        required: true
      force-plan:
        type: boolean
        description: "Force plan"
        required: true

  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
      force-apply:
        type: boolean
        description: "Force apply"
        required: true
      force-plan:
        type: boolean
        description: "Force plan"
        required: true
    secrets:
      TERRAFORM_CLOUD_TOKEN:
        description: "Terraform Cloud Token"
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  COMMENT_FILE: comment.md
  TF_CLOUD_ORGANIZATION: ${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}
  AWS_ROLE: ${{ vars.AWS_ROLE }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  should-plan: ${{ fromJson(inputs.force-plan || false) }}
  should-apply: ${{ fromJson(inputs.force-apply || false) && github.event_name != 'pull_request' }}

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Check Run
        if: (env.should-plan != 'true' && env.should-apply != 'true')
        uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          filters: |
            changed:
              - '${{ inputs.working-directory }}/**'

      - name: Set Plan & Apply flags
        if: (steps.filter-paths.outcome == 'success')
        run: |
          echo "should-plan=${{ contains(steps.filter-paths.outputs.changes, 'changed') }}" >> $GITHUB_ENV
          echo "should-apply=${{ contains(steps.filter-paths.outputs.changes, 'changed') }}" >> $GITHUB_ENV

      - name: Setup AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Terraform Setup
        if: (env.should-plan == 'true' || env.should-apply == 'true')
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}

      - name: Terraform fmt
        if: (env.should-plan == 'true' || env.should-apply == 'true')
        id: fmt
        working-directory: ${{ inputs.working-directory }}
        run: terraform fmt -check

      - name: Terraform Init
        if: (env.should-plan == 'true' || env.should-apply == 'true')
        id: init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init -no-color

      - name: Terraform Validate
        if: (env.should-plan == 'true' || env.should-apply == 'true')
        id: validate
        working-directory: ${{ inputs.working-directory }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: (env.should-plan == 'true')
        working-directory: ${{ inputs.working-directory }}
        run: terraform plan -no-color -input=false

      - name: Fetch Pull Request comment from cache
        if: (github.event_name == 'pull_request' && always())
        uses: actions/cache@v3
        id: cache
        with:
          path: ${{ env.COMMENT_FILE }}
          key: ${{ github.run_id }}

      - name: Update Pull Request Comment
        if: (github.event_name == 'pull_request' && always())
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
          COMMENT_FILE: ${{ env.COMMENT_FILE }}
        run: |
          echo '' >> $COMMENT_FILE
          echo "#### Terraform Run ####" >> $COMMENT_FILE
          echo "**Working Path** 📁 \`${{ inputs.working-directory }}\`" >> $COMMENT_FILE
          echo "**Format and Style** 🖌 \`${{ steps.fmt.outcome }}\`" >> $COMMENT_FILE
          echo "**Initialization** ⚙️ \`${{ steps.init.outcome }}\`" >> $COMMENT_FILE
          echo "**Plan** 📖 \`${{ steps.plan.outcome }}\`" >> $COMMENT_FILE
          echo "**Validation** 🤖 \`${{ steps.validate.outcome }}\`" >> $COMMENT_FILE
          echo '' >> $COMMENT_FILE
          echo "<details><summary>Show Plan</summary>" >> $COMMENT_FILE
          echo '' >> $COMMENT_FILE
          echo "\`\`\`terraform\n" >> $COMMENT_FILE
          echo "${PLAN}" >> $COMMENT_FILE
          echo "\`\`\`" >> $COMMENT_FILE
          echo '' >> $COMMENT_FILE
          echo "</details>" >> $COMMENT_FILE

      - name: Terraform Apply
        id: apply
        if: (env.should-apply == 'true' && github.event_name != 'pull_request')
        working-directory: ${{ inputs.working-directory }}
        run: terraform apply -auto-approve -no-color

      - name: Summary
        if: always()
        run: |
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "#### Terraform Run ####" >> $GITHUB_STEP_SUMMARY
          echo "**Working Path** 📁 \`${{ inputs.working-directory }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Format and Style** 🖌 \`${{ steps.fmt.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Initialization** ⚙️ \`${{ steps.init.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Plan** 📖 \`${{ steps.plan.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Validation** 🤖 \`${{ steps.validate.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Apply** 🚀 \`${{ steps.apply.outcome }}\`" >> $GITHUB_STEP_SUMMARY
