name: Database Provisioner
on:
  workflow_call:
    inputs:
      force-build:
        type: boolean
        description: "Force provisioner to build"
        required: false
      force-run:
        type: boolean
        description: "Force provisioner to run"
        required: false
      image-tag:
        type: string
        description: "Image tag"
        required: true
        default: "latest"

env:
  working-directory: "database/provisioning"
  application-name: "database-provisioner"
  SSM_PARAMETER_PREFIX: "/${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}/${{ vars.PROJECT_NAME }}/${{ vars.ENVIRONMENT_NAME }}"
  should-build: ${{ (fromJson(inputs.force-build || false)) }}
  should-run: ${{ (fromJson(inputs.force-run || false)) && github.event_name != 'pull_request' }}
  IMAGE_TAG: ${{ inputs.image-tag }}
  AWS_ROLE: ${{ vars.AWS_ROLE }}
  AWS_REGION: ${{ vars.AWS_REGION }}

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  provisioner:
    name: Build & Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        if: (env.should-build == 'true')

      - name: Check Run
        uses: dorny/paths-filter@v2
        if: (env.should-build != 'true' && env.should-run != 'true')
        id: check-run
        with:
          filters: |
            changed:
              - '${{ env.working-directory }}/**'

      - name: Should we build?
        if: (steps.check-run.outcome == 'success')
        run: |
          echo "should-build=${{ contains(steps.check-run.outputs.changes, 'changed') }}" >> $GITHUB_ENV
          echo "should-run=${{ contains(steps.check-run.outputs.changes, 'changed') }}" >> $GITHUB_ENV

      - name: Setup AWS Role
        if: (env.should-build == 'true' || env.should-run == 'true')
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Set Image Tag
        if: (env.should-build == 'true' || inputs.image-tag == 'latest')
        run: |
          echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

      - name: Set up QEMU dependency
        if: (env.should-build == 'true')
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        if: (env.should-build == 'true')
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        if: (env.should-build == 'true' || env.should-run == 'true')
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        if: (env.should-build == 'true')
        uses: docker/build-push-action@v2
        id: build-image
        with:
          context: ${{ env.context }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          platforms: linux/amd64
          push: true
        env:
          ORGANIZATION: ${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          ENVIRONMENT_NAME: ${{ vars.ENVIRONMENT_NAME }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}/${{ vars.PROJECT_NAME }}/${{ vars.ENVIRONMENT_NAME }}/${{ env.application-name }}"
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          context: ${{ env.working-directory }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: (github.event_name == 'pull_request' && always())
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Working Path 📁: \`${{ env.working-directory }}\`
            #### Docker Build ⚙️:\`${{ steps.build-image.outcome }}\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Fetch Cluster & Network Info
        if: (success() && env.should-run == 'true' && github.event_name != 'pull_request')
        id: gather-info
        run: |
          aws ssm get-parameter --name "${{ env.SSM_PARAMETER_PREFIX }}/cluster/info" --query "Parameter.Value" --output text > info.json
          echo "cluster_name=$(cat info.json | jq -r '.cluster_name')" >> $GITHUB_OUTPUT
          aws ssm get-parameter --name "${{ env.SSM_PARAMETER_PREFIX }}/network/info" --query "Parameter.Value" --output text > info.json
          echo "db_subnets=$(cat info.json | jq --arg a "," -r '.database_subnet_ids | join($a)')" >> $GITHUB_OUTPUT
          aws ssm get-parameter --name "${{ env.SSM_PARAMETER_PREFIX }}/database/info" --query "Parameter.Value" --output text > info.json
          export TASK_DEFINITION_ARN=$(cat info.json | jq -r '.runner_task_definitions["${{ env.application-name }}"]')
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION_ARN --query "taskDefinition" > task-definition.json
          tmp=$(mktemp)
          jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)' task-definition.json > $tmp
          mv $tmp task-definition.json

      - name: Update task definition
        if: (success() && env.should-run == 'true' && github.event_name != 'pull_request')
        id: update-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: "task-definition.json"
          container-name: "${{ env.application-name }}"
          image: "${{ steps.login-ecr.outputs.registry }}/${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}/${{ vars.PROJECT_NAME }}/${{ vars.ENVIRONMENT_NAME }}/${{ env.application-name }}:${{ env.IMAGE_TAG }}"

      - name: Run Provisioning
        id: run-provisioning
        if: (success() && env.should-run == 'true' && github.event_name != 'pull_request')
        run: |
          export TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.update-task-definition.outputs.task-definition }} | jq -r '.taskDefinition.taskDefinitionArn')
          export TASK_ARN=$(aws ecs run-task \
            --launch-type FARGATE \
            --task-definition ${TASK_DEF_ARN} \
            --cluster ${{ steps.gather-info.outputs.cluster_name }} \
            --network-configuration "awsvpcConfiguration={subnets=[${{ steps.gather-info.outputs.db_subnets }}],assignPublicIp=ENABLED}" | jq -r '.tasks[0].taskArn')
          echo "task_arn=${TASK_ARN}" >> $GITHUB_OUTPUT

      - name: Wait For Provisioning
        id: wait-for-provisioning
        if: (success() && env.should-run == 'true' && github.event_name != 'pull_request')
        run: |
          aws ecs wait tasks-stopped --cluster ${{ steps.gather-info.outputs.cluster_name }} --tasks ${{ steps.run-provisioning.outputs.task_arn }}
          export EXIT_CODE=$(aws ecs describe-tasks --cluster ${{ steps.gather-info.outputs.cluster_name }} --tasks ${{ steps.run-provisioning.outputs.task_arn }} | jq -r '.tasks[0].containers[0].exitCode')
          echo "exit_code=${EXIT_CODE}" >> $GITHUB_OUTPUT
          if [ $EXIT_CODE -ne 0 ]; then
            echo "Provisioning Failed"
            exit 1
          fi

      - name: Update Summary
        if: always()
        run: |
          echo '' >> $GITHUB_STEP_SUMMARY
          echo "#### Database Provisioner Build ####" >> $GITHUB_STEP_SUMMARY
          echo "**Working Path** 📁 \`${{ env.working-directory }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Docker Build** ⚙️ \`${{ steps.build-image.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Task Definition Update** ⚙️ \`${{ steps.update-task-definition.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Provisioning** 🚀 \`${{ steps.wait-for-provisioning.outcome }}\`" >> $GITHUB_STEP_SUMMARY
