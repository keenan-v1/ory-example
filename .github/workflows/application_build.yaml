name: Build Application
on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
      application-name:
        type: string
        description: "Application name"
        required: true
      aws-role:
        type: string
        description: "AWS Role"
        required: true
      aws-region:
        type: string
        description: "AWS Region"
        required: true
      force-build:
        type: boolean
        description: "Force build"
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  check-run:
    name: Check Run
    runs-on: ubuntu-latest
    outputs:
      run-tasks: ${{ contains(steps.filter-paths.outputs.changes, 'changed') || inputs.force-build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Filter Paths
        uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          filters: |
            changed:
              - '${{ inputs.working-directory }}/**'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check-run
    if: (needs.check-run.outputs.run-tasks == 'true' || inputs.force-build)
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Set up QEMU dependency
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push image to Amazon ECR
        uses: docker/build-push-action@v2
        id: build-image
        with:
          context: ${{ env.context }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          platforms: linux/arm64
          push: true
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: "${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}/${{ vars.PROJECT_NAME }}/${{ vars.ENVIRONMENT_NAME }}/${{ inputs.application-name }}"
          IMAGE_TAG: ${{ github.sha }}
          context: ${{ inputs.working-directory }}

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Working Path üìÅ: \`${{ inputs.working-directory }}\`
            #### Docker Build ‚öôÔ∏è:\`${{ steps.build-image.outcome }}\`

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Build Status
        if: steps.build-image.outcome == 'failure'
        run: exit 1
