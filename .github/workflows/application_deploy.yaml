name: Deploy Application
on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
      application-name:
        type: string
        description: "Application name"
        required: true
      aws-role:
        type: string
        description: "AWS Role"
        required: true
      aws-region:
        type: string
        description: "AWS Region"
        required: true
      force-deploy:
        type: boolean
        description: "Force deploy"
        required: true
    secrets:
      image:
        description: "The image to deploy"
        required: true
permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  SSM_PARAMETER_PREFIX: "/${{ vars.TERRAFORM_CLOUD_ORGANIZATION }}/${{ vars.PROJECT_NAME }}/${{ vars.ENVIRONMENT_NAME }}"

jobs:
  check-run:
    name: Check Run
    runs-on: ubuntu-latest
    outputs:
      run-tasks: ${{ contains(steps.filter-paths.outputs.changes, 'changed') }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Filter Paths
        uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          filters: |
            changed:
              - '${{ inputs.working-directory }}/**'

  deploy-to-ecs:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: check-run
    if: (needs.check-run.outputs.run-tasks == 'true' || inputs.force-deploy == true)
    steps:
      - name: Setup AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Fetch Application Info
        id: application-info
        run: |
          aws ssm get-parameter --name "${{ env.SSM_PARAMETER_PREFIX }}/application/${{ inputs.application-name }}/info" --query "Parameter.Value" --output text > info.json
          echo "application_info=$(cat info.json)" >> $GITHUB_OUTPUT

      - name: Fetch Application Info & Task Definition
        id: download-task-definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ fromJson(steps.application-info.outputs.application_info).task_definition_arn }} > task-definition.json

      - name: Update Task Definition
        id: update-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ fromJson(steps.application-info.outputs.application_info).container_name }}
          image: ${{ secrets.image }}

      - name: Deploy Amazon ECS task definition
        id: deploy
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-definition.outputs.task-definition }}
          service: ${{ fromJson(steps.application-info.outputs.application_info).service_name }}
          cluster: ${{ fromJson(steps.application-info.outputs.application_info).cluster_name }}
          wait-for-service-stability: true

      - name: Summary
        if: always()
        run: |
          echo "Working Path 📁: ${{ inputs.working-directory }}" >> $GITHUB_STEP_SUMMARY
          echo "Image 🖼: ${{ secrets.image }}" >> $GITHUB_STEP_SUMMARY
          echo "Task Defintion Update 🖌: ${{ steps.update-task-definition.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "Deploy Status 🚀: ${{ steps.deploy.outcome }}" >> $GITHUB_STEP_SUMMARY
