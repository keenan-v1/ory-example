name: Terraform Cloud
on:
  workflow_call:
    inputs:
      working-directory:
        type: string
        description: "Working directory"
        required: true
      aws-role:
        type: string
        description: "AWS Role"
        required: true
      aws-region:
        type: string
        description: "AWS Region"
        required: true
      terraform-cloud-organization:
        type: string
        description: "Terraform Cloud Organization"
        required: true
      force-apply:
        type: boolean
        description: "Force apply"
        required: false
        default: false
      force-run:
        type: boolean
        description: "Force run"
        required: false
        default: false
    secrets:
      terraform-cloud-token:
        description: "Terraform Cloud Token"
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

env:
  TF_CLOUD_ORGANIZATION: ${{ inputs.terraform-cloud-organization}}

jobs:
  check-run:
    runs-on: ubuntu-latest
    outputs:
      run-terraform: ${{ contains(steps.filter-paths.outputs.changes, 'changed') || inputs.force-run }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Filter Paths
        uses: dorny/paths-filter@v2
        id: filter-paths
        with:
          filters: |
            changed:
              - '${{ inputs.working-directory }}/**'

  terraform:
    runs-on: ubuntu-latest
    needs: check-run
    if: needs.check-run.outputs.run-terraform == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup AWS Role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ inputs.aws-role }}
          aws-region: ${{ inputs.aws-region }}
          role-duration-seconds: 3600
          role-session-name: ${{ github.event.repository.name }}

      - name: Terraform Init
        uses: hashicorp/setup-terraform@v2.0.3
        with:
          cli_config_credentials_token: ${{ secrets.terraform-cloud-token }}

      - name: Terraform fmt
        id: fmt
        working-directory: ${{ inputs.working-directory }}
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        working-directory: ${{ inputs.working-directory }}
        run: terraform init -no-color

      - name: Terraform Validate
        id: validate
        working-directory: ${{ inputs.working-directory }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        working-directory: ${{ inputs.working-directory }}
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Path: \`${{ inputs.working-directory }}\`
            #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        id: apply
        if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event.inputs.force-apply == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: terraform apply -auto-approve -no-color
